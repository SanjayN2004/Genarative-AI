{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/SanjayN2004/Genarative-AI/blob/main/Liver_Disease_Detection_using_ANN.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "pI8qmO8qujXq"
      },
      "outputs": [],
      "source": [
        "#importing the libraries\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "parCu25fujXr"
      },
      "outputs": [],
      "source": [
        "#importing the dataset\n",
        "dataset=pd.read_csv('/content/indian_liver_patient.csv')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 226
        },
        "id": "NkuRGfcWujXs",
        "outputId": "c502d84b-dd79-4a41-84d6-a17bf700b53c"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Age  Gender  Total_Bilirubin  Direct_Bilirubin  Alkaline_Phosphotase  \\\n",
              "0   65  Female              0.7               0.1                   187   \n",
              "1   62    Male             10.9               5.5                   699   \n",
              "2   62    Male              7.3               4.1                   490   \n",
              "3   58    Male              1.0               0.4                   182   \n",
              "4   72    Male              3.9               2.0                   195   \n",
              "\n",
              "   Alamine_Aminotransferase  Aspartate_Aminotransferase  Total_Protiens  \\\n",
              "0                        16                          18             6.8   \n",
              "1                        64                         100             7.5   \n",
              "2                        60                          68             7.0   \n",
              "3                        14                          20             6.8   \n",
              "4                        27                          59             7.3   \n",
              "\n",
              "   Albumin  Albumin_and_Globulin_Ratio  Dataset  \n",
              "0      3.3                        0.90        1  \n",
              "1      3.2                        0.74        1  \n",
              "2      3.3                        0.89        1  \n",
              "3      3.4                        1.00        1  \n",
              "4      2.4                        0.40        1  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-0c408e18-908f-4c7e-a430-6ea7d8bf8dbc\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Age</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Total_Bilirubin</th>\n",
              "      <th>Direct_Bilirubin</th>\n",
              "      <th>Alkaline_Phosphotase</th>\n",
              "      <th>Alamine_Aminotransferase</th>\n",
              "      <th>Aspartate_Aminotransferase</th>\n",
              "      <th>Total_Protiens</th>\n",
              "      <th>Albumin</th>\n",
              "      <th>Albumin_and_Globulin_Ratio</th>\n",
              "      <th>Dataset</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>65</td>\n",
              "      <td>Female</td>\n",
              "      <td>0.7</td>\n",
              "      <td>0.1</td>\n",
              "      <td>187</td>\n",
              "      <td>16</td>\n",
              "      <td>18</td>\n",
              "      <td>6.8</td>\n",
              "      <td>3.3</td>\n",
              "      <td>0.90</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>62</td>\n",
              "      <td>Male</td>\n",
              "      <td>10.9</td>\n",
              "      <td>5.5</td>\n",
              "      <td>699</td>\n",
              "      <td>64</td>\n",
              "      <td>100</td>\n",
              "      <td>7.5</td>\n",
              "      <td>3.2</td>\n",
              "      <td>0.74</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>62</td>\n",
              "      <td>Male</td>\n",
              "      <td>7.3</td>\n",
              "      <td>4.1</td>\n",
              "      <td>490</td>\n",
              "      <td>60</td>\n",
              "      <td>68</td>\n",
              "      <td>7.0</td>\n",
              "      <td>3.3</td>\n",
              "      <td>0.89</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>58</td>\n",
              "      <td>Male</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.4</td>\n",
              "      <td>182</td>\n",
              "      <td>14</td>\n",
              "      <td>20</td>\n",
              "      <td>6.8</td>\n",
              "      <td>3.4</td>\n",
              "      <td>1.00</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>72</td>\n",
              "      <td>Male</td>\n",
              "      <td>3.9</td>\n",
              "      <td>2.0</td>\n",
              "      <td>195</td>\n",
              "      <td>27</td>\n",
              "      <td>59</td>\n",
              "      <td>7.3</td>\n",
              "      <td>2.4</td>\n",
              "      <td>0.40</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0c408e18-908f-4c7e-a430-6ea7d8bf8dbc')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-0c408e18-908f-4c7e-a430-6ea7d8bf8dbc button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-0c408e18-908f-4c7e-a430-6ea7d8bf8dbc');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-4122b3b6-d7f6-43a6-b8dd-3de3ac2fc4b3\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4122b3b6-d7f6-43a6-b8dd-3de3ac2fc4b3')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-4122b3b6-d7f6-43a6-b8dd-3de3ac2fc4b3 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "dataset",
              "summary": "{\n  \"name\": \"dataset\",\n  \"rows\": 583,\n  \"fields\": [\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 16,\n        \"min\": 4,\n        \"max\": 90,\n        \"num_unique_values\": 72,\n        \"samples\": [\n          46,\n          23,\n          63\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Gender\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Male\",\n          \"Female\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Total_Bilirubin\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.209521726180149,\n        \"min\": 0.4,\n        \"max\": 75.0,\n        \"num_unique_values\": 113,\n        \"samples\": [\n          4.9,\n          3.9\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Direct_Bilirubin\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.8084976176589644,\n        \"min\": 0.1,\n        \"max\": 19.7,\n        \"num_unique_values\": 80,\n        \"samples\": [\n          6.2,\n          0.1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Alkaline_Phosphotase\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 242,\n        \"min\": 63,\n        \"max\": 2110,\n        \"num_unique_values\": 263,\n        \"samples\": [\n          386,\n          209\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Alamine_Aminotransferase\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 182,\n        \"min\": 10,\n        \"max\": 2000,\n        \"num_unique_values\": 152,\n        \"samples\": [\n          2000,\n          321\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Aspartate_Aminotransferase\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 288,\n        \"min\": 10,\n        \"max\": 4929,\n        \"num_unique_values\": 177,\n        \"samples\": [\n          66,\n          16\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Total_Protiens\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0854514840234657,\n        \"min\": 2.7,\n        \"max\": 9.6,\n        \"num_unique_values\": 58,\n        \"samples\": [\n          6.8,\n          6.7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Albumin\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7955188059640255,\n        \"min\": 0.9,\n        \"max\": 5.5,\n        \"num_unique_values\": 40,\n        \"samples\": [\n          2.0,\n          1.9\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Albumin_and_Globulin_Ratio\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3195921076723706,\n        \"min\": 0.3,\n        \"max\": 2.8,\n        \"num_unique_values\": 69,\n        \"samples\": [\n          1.6,\n          0.9\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Dataset\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 2,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          2,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 3
        }
      ],
      "source": [
        "#checking the head of our dataset\n",
        "dataset.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Dw6rK_0OujXt",
        "outputId": "84b06129-5dfc-4d6f-afef-4e1ba4c1dbe4"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 583 entries, 0 to 582\n",
            "Data columns (total 11 columns):\n",
            " #   Column                      Non-Null Count  Dtype  \n",
            "---  ------                      --------------  -----  \n",
            " 0   Age                         583 non-null    int64  \n",
            " 1   Gender                      583 non-null    object \n",
            " 2   Total_Bilirubin             583 non-null    float64\n",
            " 3   Direct_Bilirubin            583 non-null    float64\n",
            " 4   Alkaline_Phosphotase        583 non-null    int64  \n",
            " 5   Alamine_Aminotransferase    583 non-null    int64  \n",
            " 6   Aspartate_Aminotransferase  583 non-null    int64  \n",
            " 7   Total_Protiens              583 non-null    float64\n",
            " 8   Albumin                     583 non-null    float64\n",
            " 9   Albumin_and_Globulin_Ratio  579 non-null    float64\n",
            " 10  Dataset                     583 non-null    int64  \n",
            "dtypes: float64(5), int64(5), object(1)\n",
            "memory usage: 50.2+ KB\n"
          ]
        }
      ],
      "source": [
        "#checking the  info of the dataset\n",
        "dataset.info()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ehnjDTLqujXt",
        "outputId": "c292f745-dfff-44bd-d08e-09ad13f613d0"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1    416\n",
              "2    167\n",
              "Name: Dataset, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ],
      "source": [
        "#Counting the ocurrence of values of Dataset column\n",
        "dataset['Dataset'].value_counts()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5jeBY835ujXt",
        "outputId": "b50b71e1-34e6-4209-c12d-fe5752dd01f4"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0    416\n",
              "1    167\n",
              "Name: Dataset, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ],
      "source": [
        "#Converting the Binary value of the Dataset column i.e 1 and 2\n",
        "#to 0 and 1 as our ANN model got confused and the loss function become negative\n",
        "dataset.loc[dataset['Dataset']==1,'Dataset']=0\n",
        "dataset.loc[dataset['Dataset']==2,'Dataset']=1\n",
        "dataset['Dataset'].value_counts()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "PSIYiAwTujXt"
      },
      "outputs": [],
      "source": [
        "#For visualising\n",
        "import seaborn as sns"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 447
        },
        "id": "TZfiBdC8ujXu",
        "outputId": "d896647f-239e-4d8b-c601-314e421b8f6c"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: ylabel='count'>"
            ]
          },
          "metadata": {},
          "execution_count": 8
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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27fDAwCDSt7uEBUVFcXUqVOjvr6+Y6+9vT3q6+ujoqKi23MuvPDCePbZZ6O9vb1j7+9//3uMGTOm2xgCADgeef3IrKqqKlauXBk//vGP46mnnorrr78+9u/f3/FTZ3PmzInq6uqO46+//vrYu3dv3HjjjfH3v/891q1bF3fffXfccMMN+XoLAMAgkNcfu581a1bs3r07Fi9eHI2NjTFlypTYsGFDx4PWO3bsiIKC/zZbWVlZ/O53v4ubb745PvCBD8S4cePixhtvjAULFuTrLQAAg0BegygiYv78+TF//vxuv7dx48YuexUVFfH444/381QAQEpOqZ8yAwDoD4IIAEher4Losssui3379nXZb2lpicsuu+xEZwIAGFC9CqKNGzdGa2trl/3XX389/vjHP57wUAAAA6lHD1X/5S9/6fjvv/3tb53+xEZbW1ts2LAhxo0b13fTAQAMgB4F0ZQpUyKTyUQmk+n2o7Fhw4bFd77znT4bDgBgIPQoiF544YXI5XLxrne9K7Zs2RIjR47s+F5RUVGMGjWq05/VAAA4FfQoiN75zndGRHT60xkAAKe6Xv9ixn/84x/xyCOPxK5du7oE0uLFi094MACAgdKrIFq5cmVcf/31UVJSEqNHj45MJtPxvUwmI4gAgFNKr4LozjvvjLvuusvfEAMABoVe/R6iV199Na666qq+ngUAIC96FURXXXVVPPTQQ309CwBAXvTqI7OzzjorFi1aFI8//nhMmjQphg4d2un7X/rSl/pkOACAgdCrIPrhD38YI0aMiE2bNsWmTZs6fS+TyQgiAOCU0qsgeuGFF/p6DgCAvOnVM0QAAINJr+4QXXvttcf8/qpVq3o1DABAPvQqiF599dVOXx86dCiefPLJ2LdvX7d/9BUA4GTWqyD65S9/2WWvvb09rr/++nj3u999wkMBAAykPnuGqKCgIKqqquLee+/tq0sCAAyIPn2o+rnnnovDhw/35SUBAPpdrz4yq6qq6vR1LpeLV155JdatWxfXXHNNnwwGADBQehVETzzxRKevCwoKYuTIkbF06dK3/Ak0AICTTa+C6JFHHunrOQAA8qZXQfSm3bt3xzPPPBMREe973/ti5MiRfTIUAMBA6tVD1fv3749rr702xowZExdffHFcfPHFMXbs2LjuuuviwIEDfT0jAEC/6lUQVVVVxaZNm+I3v/lN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\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "#Counting the number of occurence of the different values of the Dataset column\n",
        "sns.countplot(dataset['Dataset'])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 466
        },
        "id": "Ld_vZwoPujXu",
        "outputId": "98f1ca12-8d87-4143-f90e-d7cd7995178f"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='Dataset', ylabel='Total_Protiens'>"
            ]
          },
          "metadata": {},
          "execution_count": 9
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "#Checking the Average of the total proteins vs the Whether the person is liver patient or not.\n",
        "sns.boxplot(x='Dataset',y='Total_Protiens',hue='Gender',data=dataset)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 466
        },
        "id": "tqLSbsbnujXu",
        "outputId": "bd916e9b-4693-405b-9b6f-27f236b562da"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='Dataset', ylabel='Albumin'>"
            ]
          },
          "metadata": {},
          "execution_count": 10
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "#Checking the Average of the Age vs the Whether the person is liver patient or not.\n",
        "sns.boxplot(x='Dataset',y='Albumin',hue='Gender',data=dataset,width=0.6)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 466
        },
        "id": "na1MNBMmujXu",
        "outputId": "aae65257-4a08-45e7-efba-47c6f321b155"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='Dataset', ylabel='Albumin'>"
            ]
          },
          "metadata": {},
          "execution_count": 11
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "#Checking the Average of the Albumin vs the Whether the person is liver patient or not.\n",
        "sns.boxplot(x='Dataset',y='Albumin',data=dataset,width=0.6)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "KsxnDAsrujXv"
      },
      "outputs": [],
      "source": [
        "#Converting the Categorical features"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "dGgZUph6ujXv"
      },
      "outputs": [],
      "source": [
        "new_Data=pd.get_dummies(dataset,columns=['Gender'],drop_first=True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 226
        },
        "id": "NgF5zITzujXw",
        "outputId": "9f6c0d53-6bfc-4e5e-a1c7-8bf8db671ddf"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Age  Total_Bilirubin  Direct_Bilirubin  Alkaline_Phosphotase  \\\n",
              "0   65              0.7               0.1                   187   \n",
              "1   62             10.9               5.5                   699   \n",
              "2   62              7.3               4.1                   490   \n",
              "3   58              1.0               0.4                   182   \n",
              "4   72              3.9               2.0                   195   \n",
              "\n",
              "   Alamine_Aminotransferase  Aspartate_Aminotransferase  Total_Protiens  \\\n",
              "0                        16                          18             6.8   \n",
              "1                        64                         100             7.5   \n",
              "2                        60                          68             7.0   \n",
              "3                        14                          20             6.8   \n",
              "4                        27                          59             7.3   \n",
              "\n",
              "   Albumin  Albumin_and_Globulin_Ratio  Dataset  Gender_Male  \n",
              "0      3.3                        0.90        0            0  \n",
              "1      3.2                        0.74        0            1  \n",
              "2      3.3                        0.89        0            1  \n",
              "3      3.4                        1.00        0            1  \n",
              "4      2.4                        0.40        0            1  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-9d8fb188-47df-46ff-842d-97ba9ca6ebd1\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Age</th>\n",
              "      <th>Total_Bilirubin</th>\n",
              "      <th>Direct_Bilirubin</th>\n",
              "      <th>Alkaline_Phosphotase</th>\n",
              "      <th>Alamine_Aminotransferase</th>\n",
              "      <th>Aspartate_Aminotransferase</th>\n",
              "      <th>Total_Protiens</th>\n",
              "      <th>Albumin</th>\n",
              "      <th>Albumin_and_Globulin_Ratio</th>\n",
              "      <th>Dataset</th>\n",
              "      <th>Gender_Male</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>65</td>\n",
              "      <td>0.7</td>\n",
              "      <td>0.1</td>\n",
              "      <td>187</td>\n",
              "      <td>16</td>\n",
              "      <td>18</td>\n",
              "      <td>6.8</td>\n",
              "      <td>3.3</td>\n",
              "      <td>0.90</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>62</td>\n",
              "      <td>10.9</td>\n",
              "      <td>5.5</td>\n",
              "      <td>699</td>\n",
              "      <td>64</td>\n",
              "      <td>100</td>\n",
              "      <td>7.5</td>\n",
              "      <td>3.2</td>\n",
              "      <td>0.74</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>62</td>\n",
              "      <td>7.3</td>\n",
              "      <td>4.1</td>\n",
              "      <td>490</td>\n",
              "      <td>60</td>\n",
              "      <td>68</td>\n",
              "      <td>7.0</td>\n",
              "      <td>3.3</td>\n",
              "      <td>0.89</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>58</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.4</td>\n",
              "      <td>182</td>\n",
              "      <td>14</td>\n",
              "      <td>20</td>\n",
              "      <td>6.8</td>\n",
              "      <td>3.4</td>\n",
              "      <td>1.00</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>72</td>\n",
              "      <td>3.9</td>\n",
              "      <td>2.0</td>\n",
              "      <td>195</td>\n",
              "      <td>27</td>\n",
              "      <td>59</td>\n",
              "      <td>7.3</td>\n",
              "      <td>2.4</td>\n",
              "      <td>0.40</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9d8fb188-47df-46ff-842d-97ba9ca6ebd1')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-9d8fb188-47df-46ff-842d-97ba9ca6ebd1 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-9d8fb188-47df-46ff-842d-97ba9ca6ebd1');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-436308df-d6d5-4230-9d65-b997a48f9b83\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-436308df-d6d5-4230-9d65-b997a48f9b83')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-436308df-d6d5-4230-9d65-b997a48f9b83 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "new_Data",
              "summary": "{\n  \"name\": \"new_Data\",\n  \"rows\": 583,\n  \"fields\": [\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 16,\n        \"min\": 4,\n        \"max\": 90,\n        \"num_unique_values\": 72,\n        \"samples\": [\n          46,\n          23,\n          63\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Total_Bilirubin\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.209521726180149,\n        \"min\": 0.4,\n        \"max\": 75.0,\n        \"num_unique_values\": 113,\n        \"samples\": [\n          4.9,\n          3.9,\n          15.9\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Direct_Bilirubin\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.8084976176589644,\n        \"min\": 0.1,\n        \"max\": 19.7,\n        \"num_unique_values\": 80,\n        \"samples\": [\n          6.2,\n          0.1,\n          4.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Alkaline_Phosphotase\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 242,\n        \"min\": 63,\n        \"max\": 2110,\n        \"num_unique_values\": 263,\n        \"samples\": [\n          386,\n          209,\n          560\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Alamine_Aminotransferase\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 182,\n        \"min\": 10,\n        \"max\": 2000,\n        \"num_unique_values\": 152,\n        \"samples\": [\n          2000,\n          321,\n          41\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Aspartate_Aminotransferase\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 288,\n        \"min\": 10,\n        \"max\": 4929,\n        \"num_unique_values\": 177,\n        \"samples\": [\n          66,\n          16,\n          190\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Total_Protiens\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0854514840234657,\n        \"min\": 2.7,\n        \"max\": 9.6,\n        \"num_unique_values\": 58,\n        \"samples\": [\n          6.8,\n          6.7,\n          7.1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Albumin\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7955188059640255,\n        \"min\": 0.9,\n        \"max\": 5.5,\n        \"num_unique_values\": 40,\n        \"samples\": [\n          2.0,\n          1.9,\n          4.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Albumin_and_Globulin_Ratio\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3195921076723706,\n        \"min\": 0.3,\n        \"max\": 2.8,\n        \"num_unique_values\": 69,\n        \"samples\": [\n          1.6,\n          0.9,\n          1.03\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Dataset\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Gender_Male\",\n      \"properties\": {\n        \"dtype\": \"uint8\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 13
        }
      ],
      "source": [
        "new_Data.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yhkfQQxEujXw",
        "outputId": "f70ddb58-4898-4b72-c101-0913cf5416e5"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 583 entries, 0 to 582\n",
            "Data columns (total 11 columns):\n",
            " #   Column                      Non-Null Count  Dtype  \n",
            "---  ------                      --------------  -----  \n",
            " 0   Age                         583 non-null    int64  \n",
            " 1   Total_Bilirubin             583 non-null    float64\n",
            " 2   Direct_Bilirubin            583 non-null    float64\n",
            " 3   Alkaline_Phosphotase        583 non-null    int64  \n",
            " 4   Alamine_Aminotransferase    583 non-null    int64  \n",
            " 5   Aspartate_Aminotransferase  583 non-null    int64  \n",
            " 6   Total_Protiens              583 non-null    float64\n",
            " 7   Albumin                     583 non-null    float64\n",
            " 8   Albumin_and_Globulin_Ratio  579 non-null    float64\n",
            " 9   Dataset                     583 non-null    int64  \n",
            " 10  Gender_Male                 583 non-null    uint8  \n",
            "dtypes: float64(5), int64(5), uint8(1)\n",
            "memory usage: 46.2 KB\n"
          ]
        }
      ],
      "source": [
        "new_Data.info()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 631
        },
        "id": "PZMrrr_7ujXx",
        "outputId": "cbad67fe-779d-4ffd-a383-d2a1689cb5b7"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: >"
            ]
          },
          "metadata": {},
          "execution_count": 15
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "#Checking for null data\n",
        "sns.heatmap(new_Data.isnull(),yticklabels=False,cbar=False,cmap='viridis')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "sxRkPl53ujXx"
      },
      "outputs": [],
      "source": [
        "#converting the null value into mean value\n",
        "def Converter(data):\n",
        "    if pd.isnull(data):\n",
        "        return new_Data['Albumin_and_Globulin_Ratio'].mean()\n",
        "    else:\n",
        "        return data\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "EFh4kzlPujXx"
      },
      "outputs": [],
      "source": [
        "#Applying the Function to column of the dataset that have null values\n",
        "new_Data['Albumin_and_Globulin_Ratio']=new_Data['Albumin_and_Globulin_Ratio'].apply(Converter)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 631
        },
        "id": "sIFuL_qZujXx",
        "outputId": "a1facfdc-2fc5-4dc2-f00b-0f0731281b23"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: >"
            ]
          },
          "metadata": {},
          "execution_count": 18
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "#Rechecking for null value\n",
        "sns.heatmap(new_Data.isnull(),yticklabels=False,cbar=False,cmap='viridis')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "JSNEFNQRujXx"
      },
      "outputs": [],
      "source": [
        "#Converting the dataset into x and y(target variable)\n",
        "X=new_Data.drop('Dataset',axis=1)\n",
        "y=new_Data['Dataset']"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "xKj4DyQXujXy"
      },
      "outputs": [],
      "source": [
        "#Dividing the data into training and test set\n",
        "from sklearn.model_selection import train_test_split"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "1qw6QlT5ujXy"
      },
      "outputs": [],
      "source": [
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "WT3fzJruujXy"
      },
      "outputs": [],
      "source": [
        "#feature scaling"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "3K4cwZshujXy"
      },
      "outputs": [],
      "source": [
        "from sklearn.preprocessing import StandardScaler"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "_ssC4avJujXy"
      },
      "outputs": [],
      "source": [
        "scaler=StandardScaler()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "WZgzXnzSujXy"
      },
      "outputs": [],
      "source": [
        "X_train=scaler.fit_transform(X_train)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "q1XZzkCDujXy"
      },
      "outputs": [],
      "source": [
        "X_test=scaler.transform(X_test)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "PaTO5vGdujXz"
      },
      "outputs": [],
      "source": [
        "import keras\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "bMmJqr2RujXz"
      },
      "outputs": [],
      "source": [
        "#importing the libraries for our ANN Model\n",
        "from keras.models import Sequential\n",
        "from keras.layers import Dense\n",
        "from keras.layers import Dropout"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "zzHboY46ujXz"
      },
      "outputs": [],
      "source": [
        "#Initialising the model\n",
        "model=Sequential()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "4zU-9p9dujXz"
      },
      "outputs": [],
      "source": [
        "#adding the first layer\n",
        "model.add(Dense(units=6,kernel_initializer='uniform',activation='relu',input_dim=10))\n",
        "model.add(Dropout(0.2))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Rx2hN5DOujXz"
      },
      "outputs": [],
      "source": [
        "#new_Data.info()\n",
        "#adding the second layer\n",
        "model.add(Dense(units=6,kernel_initializer='uniform',activation='relu'))\n",
        "model.add(Dropout(0.2))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "fP7N1dneujX0"
      },
      "outputs": [],
      "source": [
        "#adding the output layer\n",
        "model.add(Dense(units=1,kernel_initializer='uniform',activation='sigmoid'))\n",
        "model.add(Dropout(0.2))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "QLdFAwa1ujX0"
      },
      "outputs": [],
      "source": [
        "#compiling all the layer together\n",
        "model.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wPWDPlD5ujX0",
        "outputId": "98268dc5-fe59-4890-a850-433e8d48c95b"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/400\n",
            "24/24 [==============================] - 1s 3ms/step - loss: 1.6538 - accuracy: 0.3541\n",
            "Epoch 2/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.4924 - accuracy: 0.3541\n",
            "Epoch 3/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.3297 - accuracy: 0.3841\n",
            "Epoch 4/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.7989 - accuracy: 0.3412\n",
            "Epoch 5/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.8360 - accuracy: 0.3605\n",
            "Epoch 6/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.4657 - accuracy: 0.5494\n",
            "Epoch 7/400\n",
            "24/24 [==============================] - 0s 4ms/step - loss: 1.3695 - accuracy: 0.6288\n",
            "Epoch 8/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.2578 - accuracy: 0.7039\n",
            "Epoch 9/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.4424 - accuracy: 0.6910\n",
            "Epoch 10/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.3750 - accuracy: 0.7167\n",
            "Epoch 11/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.0703 - accuracy: 0.7253\n",
            "Epoch 12/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.5426 - accuracy: 0.7124\n",
            "Epoch 13/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.2256 - accuracy: 0.7361\n",
            "Epoch 14/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.1404 - accuracy: 0.7361\n",
            "Epoch 15/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.3064 - accuracy: 0.7296\n",
            "Epoch 16/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.1274 - accuracy: 0.7296\n",
            "Epoch 17/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.2544 - accuracy: 0.7275\n",
            "Epoch 18/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.6415 - accuracy: 0.7275\n",
            "Epoch 19/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.0890 - accuracy: 0.7339\n",
            "Epoch 20/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.1103 - accuracy: 0.7318\n",
            "Epoch 21/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.2271 - accuracy: 0.7318\n",
            "Epoch 22/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.3879 - accuracy: 0.7339\n",
            "Epoch 23/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.1972 - accuracy: 0.7318\n",
            "Epoch 24/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.3961 - accuracy: 0.7296\n",
            "Epoch 25/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.5187 - accuracy: 0.7275\n",
            "Epoch 26/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.3044 - accuracy: 0.7296\n",
            "Epoch 27/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.3244 - accuracy: 0.7339\n",
            "Epoch 28/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.2515 - accuracy: 0.7253\n",
            "Epoch 29/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.1641 - accuracy: 0.7339\n",
            "Epoch 30/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.2318 - accuracy: 0.7361\n",
            "Epoch 31/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.5610 - accuracy: 0.7339\n",
            "Epoch 32/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.1521 - accuracy: 0.7339\n",
            "Epoch 33/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.3942 - accuracy: 0.7296\n",
            "Epoch 34/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.1999 - accuracy: 0.7361\n",
            "Epoch 35/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.3381 - accuracy: 0.7296\n",
            "Epoch 36/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.3201 - accuracy: 0.7296\n",
            "Epoch 37/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.1327 - accuracy: 0.7339\n",
            "Epoch 38/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.2641 - accuracy: 0.7275\n",
            "Epoch 39/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.0013 - accuracy: 0.7275\n",
            "Epoch 40/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.3977 - accuracy: 0.7296\n",
            "Epoch 41/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.1147 - accuracy: 0.7318\n",
            "Epoch 42/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.3235 - accuracy: 0.7339\n",
            "Epoch 43/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.1459 - accuracy: 0.7275\n",
            "Epoch 44/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.1480 - accuracy: 0.7296\n",
            "Epoch 45/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.2327 - accuracy: 0.7361\n",
            "Epoch 46/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.1968 - accuracy: 0.7296\n",
            "Epoch 47/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.4188 - accuracy: 0.7361\n",
            "Epoch 48/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.3235 - accuracy: 0.7318\n",
            "Epoch 49/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.3196 - accuracy: 0.7339\n",
            "Epoch 50/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.1019 - accuracy: 0.7339\n",
            "Epoch 51/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.1956 - accuracy: 0.7382\n",
            "Epoch 52/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.1618 - accuracy: 0.7425\n",
            "Epoch 53/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.4140 - accuracy: 0.7339\n",
            "Epoch 54/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.3302 - accuracy: 0.7296\n",
            "Epoch 55/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.3417 - accuracy: 0.7339\n",
            "Epoch 56/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.0427 - accuracy: 0.7296\n",
            "Epoch 57/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.2480 - accuracy: 0.7296\n",
            "Epoch 58/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.0805 - accuracy: 0.7318\n",
            "Epoch 59/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.5552 - accuracy: 0.7361\n",
            "Epoch 60/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.1438 - accuracy: 0.7382\n",
            "Epoch 61/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.1483 - accuracy: 0.7296\n",
            "Epoch 62/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.2485 - accuracy: 0.7318\n",
            "Epoch 63/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.3872 - accuracy: 0.7296\n",
            "Epoch 64/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.1281 - accuracy: 0.7253\n",
            "Epoch 65/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.0428 - accuracy: 0.7296\n",
            "Epoch 66/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.2951 - accuracy: 0.7210\n",
            "Epoch 67/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.2928 - accuracy: 0.7296\n",
            "Epoch 68/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.3157 - accuracy: 0.7296\n",
            "Epoch 69/400\n",
            "24/24 [==============================] - 0s 2ms/step - loss: 1.5649 - accuracy: 0.7361\n",
            "Epoch 70/400\n",
            "24/24 [==============================] - 0s 2ms/step - loss: 1.4077 - accuracy: 0.7339\n",
            "Epoch 71/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.2501 - accuracy: 0.7339\n",
            "Epoch 72/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.2495 - accuracy: 0.7253\n",
            "Epoch 73/400\n",
            "24/24 [==============================] - 0s 2ms/step - loss: 1.2322 - accuracy: 0.7361\n",
            "Epoch 74/400\n",
            "24/24 [==============================] - 0s 2ms/step - loss: 1.1546 - accuracy: 0.7339\n",
            "Epoch 75/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.3085 - accuracy: 0.7339\n",
            "Epoch 76/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.2096 - accuracy: 0.7318\n",
            "Epoch 77/400\n",
            "24/24 [==============================] - 0s 2ms/step - loss: 0.9699 - accuracy: 0.7296\n",
            "Epoch 78/400\n",
            "24/24 [==============================] - 0s 2ms/step - loss: 1.4266 - accuracy: 0.7361\n",
            "Epoch 79/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.0716 - accuracy: 0.7361\n",
            "Epoch 80/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.0410 - accuracy: 0.7403\n",
            "Epoch 81/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.2922 - accuracy: 0.7275\n",
            "Epoch 82/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.1090 - accuracy: 0.7253\n",
            "Epoch 83/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.2866 - accuracy: 0.7275\n",
            "Epoch 84/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.4095 - accuracy: 0.7403\n",
            "Epoch 85/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.2290 - accuracy: 0.7339\n",
            "Epoch 86/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.0823 - accuracy: 0.7318\n",
            "Epoch 87/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.0357 - accuracy: 0.7318\n",
            "Epoch 88/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.0714 - accuracy: 0.7361\n",
            "Epoch 89/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.4985 - accuracy: 0.7275\n",
            "Epoch 90/400\n",
            "24/24 [==============================] - 0s 4ms/step - loss: 1.2670 - accuracy: 0.7339\n",
            "Epoch 91/400\n",
            "24/24 [==============================] - 0s 4ms/step - loss: 1.2550 - accuracy: 0.7296\n",
            "Epoch 92/400\n",
            "24/24 [==============================] - 0s 4ms/step - loss: 1.0682 - accuracy: 0.7361\n",
            "Epoch 93/400\n",
            "24/24 [==============================] - 0s 4ms/step - loss: 1.0202 - accuracy: 0.7339\n",
            "Epoch 94/400\n",
            "24/24 [==============================] - 0s 4ms/step - loss: 1.2386 - accuracy: 0.7296\n",
            "Epoch 95/400\n",
            "24/24 [==============================] - 0s 4ms/step - loss: 1.3482 - accuracy: 0.7275\n",
            "Epoch 96/400\n",
            "24/24 [==============================] - 0s 4ms/step - loss: 1.1009 - accuracy: 0.7275\n",
            "Epoch 97/400\n",
            "24/24 [==============================] - 0s 4ms/step - loss: 0.9799 - accuracy: 0.7318\n",
            "Epoch 98/400\n",
            "24/24 [==============================] - 0s 4ms/step - loss: 1.1612 - accuracy: 0.7275\n",
            "Epoch 99/400\n",
            "24/24 [==============================] - 0s 4ms/step - loss: 1.3134 - accuracy: 0.7361\n",
            "Epoch 100/400\n",
            "24/24 [==============================] - 0s 4ms/step - loss: 1.3120 - accuracy: 0.7339\n",
            "Epoch 101/400\n",
            "24/24 [==============================] - 0s 4ms/step - loss: 1.3346 - accuracy: 0.7339\n",
            "Epoch 102/400\n",
            "24/24 [==============================] - 0s 4ms/step - loss: 1.2092 - accuracy: 0.7318\n",
            "Epoch 103/400\n",
            "24/24 [==============================] - 0s 4ms/step - loss: 1.1498 - accuracy: 0.7296\n",
            "Epoch 104/400\n",
            "24/24 [==============================] - 0s 4ms/step - loss: 1.5375 - accuracy: 0.7339\n",
            "Epoch 105/400\n",
            "24/24 [==============================] - 0s 4ms/step - loss: 1.4050 - accuracy: 0.7361\n",
            "Epoch 106/400\n",
            "24/24 [==============================] - 0s 4ms/step - loss: 1.2805 - accuracy: 0.7296\n",
            "Epoch 107/400\n",
            "24/24 [==============================] - 0s 4ms/step - loss: 1.3227 - accuracy: 0.7361\n",
            "Epoch 108/400\n",
            "24/24 [==============================] - 0s 4ms/step - loss: 1.2359 - accuracy: 0.7339\n",
            "Epoch 109/400\n",
            "24/24 [==============================] - 0s 4ms/step - loss: 1.3098 - accuracy: 0.7339\n",
            "Epoch 110/400\n",
            "24/24 [==============================] - 0s 4ms/step - loss: 0.8759 - accuracy: 0.7403\n",
            "Epoch 111/400\n",
            "24/24 [==============================] - 0s 4ms/step - loss: 1.1868 - accuracy: 0.7382\n",
            "Epoch 112/400\n",
            "24/24 [==============================] - 0s 4ms/step - loss: 1.1341 - accuracy: 0.7361\n",
            "Epoch 113/400\n",
            "24/24 [==============================] - 0s 4ms/step - loss: 1.0423 - accuracy: 0.7382\n",
            "Epoch 114/400\n",
            "24/24 [==============================] - 0s 4ms/step - loss: 1.3612 - accuracy: 0.7361\n",
            "Epoch 115/400\n",
            "24/24 [==============================] - 0s 4ms/step - loss: 1.3106 - accuracy: 0.7339\n",
            "Epoch 116/400\n",
            "24/24 [==============================] - 0s 4ms/step - loss: 1.2279 - accuracy: 0.7296\n",
            "Epoch 117/400\n",
            "24/24 [==============================] - 0s 4ms/step - loss: 1.2511 - accuracy: 0.7339\n",
            "Epoch 118/400\n",
            "24/24 [==============================] - 0s 4ms/step - loss: 1.1863 - accuracy: 0.7339\n",
            "Epoch 119/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.2207 - accuracy: 0.7361\n",
            "Epoch 120/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.0378 - accuracy: 0.7403\n",
            "Epoch 121/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.0832 - accuracy: 0.7361\n",
            "Epoch 122/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.3703 - accuracy: 0.7318\n",
            "Epoch 123/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.4041 - accuracy: 0.7403\n",
            "Epoch 124/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.0561 - accuracy: 0.7339\n",
            "Epoch 125/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.3696 - accuracy: 0.7361\n",
            "Epoch 126/400\n",
            "24/24 [==============================] - 0s 2ms/step - loss: 0.8486 - accuracy: 0.7361\n",
            "Epoch 127/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.1645 - accuracy: 0.7339\n",
            "Epoch 128/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.0791 - accuracy: 0.7339\n",
            "Epoch 129/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.3411 - accuracy: 0.7318\n",
            "Epoch 130/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.4176 - accuracy: 0.7318\n",
            "Epoch 131/400\n",
            "24/24 [==============================] - 0s 4ms/step - loss: 1.1839 - accuracy: 0.7339\n",
            "Epoch 132/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.2633 - accuracy: 0.7318\n",
            "Epoch 133/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.2798 - accuracy: 0.7403\n",
            "Epoch 134/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.1445 - accuracy: 0.7296\n",
            "Epoch 135/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.0405 - accuracy: 0.7339\n",
            "Epoch 136/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.3305 - accuracy: 0.7403\n",
            "Epoch 137/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.2694 - accuracy: 0.7361\n",
            "Epoch 138/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.2022 - accuracy: 0.7339\n",
            "Epoch 139/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.2972 - accuracy: 0.7339\n",
            "Epoch 140/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.5299 - accuracy: 0.7339\n",
            "Epoch 141/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.3658 - accuracy: 0.7425\n",
            "Epoch 142/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.3355 - accuracy: 0.7296\n",
            "Epoch 143/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.0433 - accuracy: 0.7296\n",
            "Epoch 144/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.2009 - accuracy: 0.7403\n",
            "Epoch 145/400\n",
            "24/24 [==============================] - 0s 4ms/step - loss: 1.3830 - accuracy: 0.7382\n",
            "Epoch 146/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.1338 - accuracy: 0.7318\n",
            "Epoch 147/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.3379 - accuracy: 0.7361\n",
            "Epoch 148/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.2093 - accuracy: 0.7339\n",
            "Epoch 149/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.3355 - accuracy: 0.7403\n",
            "Epoch 150/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.3632 - accuracy: 0.7275\n",
            "Epoch 151/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.2141 - accuracy: 0.7361\n",
            "Epoch 152/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.1665 - accuracy: 0.7361\n",
            "Epoch 153/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.1997 - accuracy: 0.7318\n",
            "Epoch 154/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 0.9403 - accuracy: 0.7339\n",
            "Epoch 155/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.2369 - accuracy: 0.7361\n",
            "Epoch 156/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.2302 - accuracy: 0.7361\n",
            "Epoch 157/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.5083 - accuracy: 0.7361\n",
            "Epoch 158/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.2190 - accuracy: 0.7339\n",
            "Epoch 159/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.1511 - accuracy: 0.7339\n",
            "Epoch 160/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.1108 - accuracy: 0.7361\n",
            "Epoch 161/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.3064 - accuracy: 0.7361\n",
            "Epoch 162/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.3701 - accuracy: 0.7339\n",
            "Epoch 163/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.2528 - accuracy: 0.7339\n",
            "Epoch 164/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.2521 - accuracy: 0.7318\n",
            "Epoch 165/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.0688 - accuracy: 0.7339\n",
            "Epoch 166/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.3673 - accuracy: 0.7361\n",
            "Epoch 167/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.1879 - accuracy: 0.7318\n",
            "Epoch 168/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.2560 - accuracy: 0.7361\n",
            "Epoch 169/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.2607 - accuracy: 0.7318\n",
            "Epoch 170/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.0338 - accuracy: 0.7382\n",
            "Epoch 171/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.2998 - accuracy: 0.7318\n",
            "Epoch 172/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.2374 - accuracy: 0.7361\n",
            "Epoch 173/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.1894 - accuracy: 0.7318\n",
            "Epoch 174/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.1277 - accuracy: 0.7339\n",
            "Epoch 175/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.3050 - accuracy: 0.7339\n",
            "Epoch 176/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.1685 - accuracy: 0.7361\n",
            "Epoch 177/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.1139 - accuracy: 0.7361\n",
            "Epoch 178/400\n",
            "24/24 [==============================] - 0s 2ms/step - loss: 1.2298 - accuracy: 0.7339\n",
            "Epoch 179/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.3908 - accuracy: 0.7339\n",
            "Epoch 180/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.1337 - accuracy: 0.7361\n",
            "Epoch 181/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.1219 - accuracy: 0.7361\n",
            "Epoch 182/400\n",
            "24/24 [==============================] - 0s 2ms/step - loss: 1.1512 - accuracy: 0.7361\n",
            "Epoch 183/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.1196 - accuracy: 0.7318\n",
            "Epoch 184/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.2905 - accuracy: 0.7361\n",
            "Epoch 185/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 0.9983 - accuracy: 0.7318\n",
            "Epoch 186/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.1943 - accuracy: 0.7339\n",
            "Epoch 187/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.0001 - accuracy: 0.7339\n",
            "Epoch 188/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.3652 - accuracy: 0.7339\n",
            "Epoch 189/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.2784 - accuracy: 0.7339\n",
            "Epoch 190/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.3223 - accuracy: 0.7318\n",
            "Epoch 191/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.2652 - accuracy: 0.7318\n",
            "Epoch 192/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.1199 - accuracy: 0.7339\n",
            "Epoch 193/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.1719 - accuracy: 0.7318\n",
            "Epoch 194/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.0988 - accuracy: 0.7361\n",
            "Epoch 195/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.3579 - accuracy: 0.7318\n",
            "Epoch 196/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.3104 - accuracy: 0.7296\n",
            "Epoch 197/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.0620 - accuracy: 0.7339\n",
            "Epoch 198/400\n",
            "24/24 [==============================] - 0s 4ms/step - loss: 1.3422 - accuracy: 0.7339\n",
            "Epoch 199/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.3621 - accuracy: 0.7296\n",
            "Epoch 200/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.1830 - accuracy: 0.7339\n",
            "Epoch 201/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 0.9637 - accuracy: 0.7361\n",
            "Epoch 202/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.3620 - accuracy: 0.7339\n",
            "Epoch 203/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.1989 - accuracy: 0.7339\n",
            "Epoch 204/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.2226 - accuracy: 0.7318\n",
            "Epoch 205/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 0.9717 - accuracy: 0.7296\n",
            "Epoch 206/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.1049 - accuracy: 0.7339\n",
            "Epoch 207/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.0430 - accuracy: 0.7339\n",
            "Epoch 208/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.2833 - accuracy: 0.7296\n",
            "Epoch 209/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.1227 - accuracy: 0.7275\n",
            "Epoch 210/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.2319 - accuracy: 0.7339\n",
            "Epoch 211/400\n",
            "24/24 [==============================] - 0s 4ms/step - loss: 1.2306 - accuracy: 0.7361\n",
            "Epoch 212/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.5058 - accuracy: 0.7318\n",
            "Epoch 213/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.2234 - accuracy: 0.7318\n",
            "Epoch 214/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.1913 - accuracy: 0.7339\n",
            "Epoch 215/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 0.9981 - accuracy: 0.7339\n",
            "Epoch 216/400\n",
            "24/24 [==============================] - 0s 2ms/step - loss: 1.0342 - accuracy: 0.7318\n",
            "Epoch 217/400\n",
            "24/24 [==============================] - 0s 2ms/step - loss: 1.2864 - accuracy: 0.7296\n",
            "Epoch 218/400\n",
            "24/24 [==============================] - 0s 2ms/step - loss: 1.3931 - accuracy: 0.7361\n",
            "Epoch 219/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.1060 - accuracy: 0.7318\n",
            "Epoch 220/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.1925 - accuracy: 0.7339\n",
            "Epoch 221/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.3178 - accuracy: 0.7339\n",
            "Epoch 222/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.2079 - accuracy: 0.7318\n",
            "Epoch 223/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.3971 - accuracy: 0.7318\n",
            "Epoch 224/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.3744 - accuracy: 0.7318\n",
            "Epoch 225/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.1771 - accuracy: 0.7339\n",
            "Epoch 226/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.1944 - accuracy: 0.7361\n",
            "Epoch 227/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.0061 - accuracy: 0.7339\n",
            "Epoch 228/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 0.9524 - accuracy: 0.7318\n",
            "Epoch 229/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.4582 - accuracy: 0.7339\n",
            "Epoch 230/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.2394 - accuracy: 0.7339\n",
            "Epoch 231/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.0992 - accuracy: 0.7318\n",
            "Epoch 232/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.1168 - accuracy: 0.7339\n",
            "Epoch 233/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.1887 - accuracy: 0.7339\n",
            "Epoch 234/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.3798 - accuracy: 0.7339\n",
            "Epoch 235/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.1405 - accuracy: 0.7318\n",
            "Epoch 236/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.2319 - accuracy: 0.7318\n",
            "Epoch 237/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.2247 - accuracy: 0.7339\n",
            "Epoch 238/400\n",
            "24/24 [==============================] - 0s 4ms/step - loss: 1.3736 - accuracy: 0.7339\n",
            "Epoch 239/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.4165 - accuracy: 0.7339\n",
            "Epoch 240/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.2555 - accuracy: 0.7318\n",
            "Epoch 241/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.3089 - accuracy: 0.7361\n",
            "Epoch 242/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.2034 - accuracy: 0.7296\n",
            "Epoch 243/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.2777 - accuracy: 0.7318\n",
            "Epoch 244/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.2253 - accuracy: 0.7318\n",
            "Epoch 245/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.0009 - accuracy: 0.7339\n",
            "Epoch 246/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.1599 - accuracy: 0.7318\n",
            "Epoch 247/400\n",
            "24/24 [==============================] - 0s 4ms/step - loss: 1.0517 - accuracy: 0.7318\n",
            "Epoch 248/400\n",
            "24/24 [==============================] - 0s 4ms/step - loss: 1.0303 - accuracy: 0.7339\n",
            "Epoch 249/400\n",
            "24/24 [==============================] - 0s 5ms/step - loss: 1.2770 - accuracy: 0.7339\n",
            "Epoch 250/400\n",
            "24/24 [==============================] - 0s 4ms/step - loss: 1.2110 - accuracy: 0.7339\n",
            "Epoch 251/400\n",
            "24/24 [==============================] - 0s 4ms/step - loss: 1.2386 - accuracy: 0.7318\n",
            "Epoch 252/400\n",
            "24/24 [==============================] - 0s 4ms/step - loss: 1.0053 - accuracy: 0.7361\n",
            "Epoch 253/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.0957 - accuracy: 0.7339\n",
            "Epoch 254/400\n",
            "24/24 [==============================] - 0s 4ms/step - loss: 1.1002 - accuracy: 0.7339\n",
            "Epoch 255/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.3429 - accuracy: 0.7339\n",
            "Epoch 256/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.3423 - accuracy: 0.7361\n",
            "Epoch 257/400\n",
            "24/24 [==============================] - 0s 4ms/step - loss: 1.0711 - accuracy: 0.7339\n",
            "Epoch 258/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.0953 - accuracy: 0.7339\n",
            "Epoch 259/400\n",
            "24/24 [==============================] - 0s 4ms/step - loss: 1.2344 - accuracy: 0.7339\n",
            "Epoch 260/400\n",
            "24/24 [==============================] - 0s 4ms/step - loss: 1.3020 - accuracy: 0.7339\n",
            "Epoch 261/400\n",
            "24/24 [==============================] - 0s 4ms/step - loss: 1.3134 - accuracy: 0.7339\n",
            "Epoch 262/400\n",
            "24/24 [==============================] - 0s 4ms/step - loss: 1.1566 - accuracy: 0.7339\n",
            "Epoch 263/400\n",
            "24/24 [==============================] - 0s 4ms/step - loss: 1.2467 - accuracy: 0.7339\n",
            "Epoch 264/400\n",
            "24/24 [==============================] - 0s 4ms/step - loss: 1.1091 - accuracy: 0.7339\n",
            "Epoch 265/400\n",
            "24/24 [==============================] - 0s 4ms/step - loss: 1.1949 - accuracy: 0.7339\n",
            "Epoch 266/400\n",
            "24/24 [==============================] - 0s 4ms/step - loss: 1.3380 - accuracy: 0.7339\n",
            "Epoch 267/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.1138 - accuracy: 0.7339\n",
            "Epoch 268/400\n",
            "24/24 [==============================] - 0s 4ms/step - loss: 1.1976 - accuracy: 0.7339\n",
            "Epoch 269/400\n",
            "24/24 [==============================] - 0s 4ms/step - loss: 1.1694 - accuracy: 0.7339\n",
            "Epoch 270/400\n",
            "24/24 [==============================] - 0s 4ms/step - loss: 1.1351 - accuracy: 0.7339\n",
            "Epoch 271/400\n",
            "24/24 [==============================] - 0s 4ms/step - loss: 1.0554 - accuracy: 0.7339\n",
            "Epoch 272/400\n",
            "24/24 [==============================] - 0s 4ms/step - loss: 1.0943 - accuracy: 0.7339\n",
            "Epoch 273/400\n",
            "24/24 [==============================] - 0s 4ms/step - loss: 1.2264 - accuracy: 0.7339\n",
            "Epoch 274/400\n",
            "24/24 [==============================] - 0s 4ms/step - loss: 1.1003 - accuracy: 0.7339\n",
            "Epoch 275/400\n",
            "24/24 [==============================] - 0s 4ms/step - loss: 1.2358 - accuracy: 0.7339\n",
            "Epoch 276/400\n",
            "24/24 [==============================] - 0s 4ms/step - loss: 1.2378 - accuracy: 0.7339\n",
            "Epoch 277/400\n",
            "24/24 [==============================] - 0s 5ms/step - loss: 1.4681 - accuracy: 0.7339\n",
            "Epoch 278/400\n",
            "24/24 [==============================] - 0s 5ms/step - loss: 1.2190 - accuracy: 0.7339\n",
            "Epoch 279/400\n",
            "24/24 [==============================] - 0s 4ms/step - loss: 1.0645 - accuracy: 0.7339\n",
            "Epoch 280/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.0129 - accuracy: 0.7339\n",
            "Epoch 281/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.2454 - accuracy: 0.7339\n",
            "Epoch 282/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.1848 - accuracy: 0.7339\n",
            "Epoch 283/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.1437 - accuracy: 0.7339\n",
            "Epoch 284/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.1541 - accuracy: 0.7339\n",
            "Epoch 285/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.1633 - accuracy: 0.7339\n",
            "Epoch 286/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.1611 - accuracy: 0.7339\n",
            "Epoch 287/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.2652 - accuracy: 0.7339\n",
            "Epoch 288/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.0634 - accuracy: 0.7339\n",
            "Epoch 289/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.2515 - accuracy: 0.7339\n",
            "Epoch 290/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.1159 - accuracy: 0.7339\n",
            "Epoch 291/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.3933 - accuracy: 0.7339\n",
            "Epoch 292/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.1228 - accuracy: 0.7339\n",
            "Epoch 293/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.3965 - accuracy: 0.7339\n",
            "Epoch 294/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.1647 - accuracy: 0.7339\n",
            "Epoch 295/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.2846 - accuracy: 0.7339\n",
            "Epoch 296/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.2622 - accuracy: 0.7339\n",
            "Epoch 297/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.3436 - accuracy: 0.7339\n",
            "Epoch 298/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.1552 - accuracy: 0.7339\n",
            "Epoch 299/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.0680 - accuracy: 0.7339\n",
            "Epoch 300/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.1871 - accuracy: 0.7339\n",
            "Epoch 301/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.5593 - accuracy: 0.7339\n",
            "Epoch 302/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.2873 - accuracy: 0.7339\n",
            "Epoch 303/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 0.9509 - accuracy: 0.7339\n",
            "Epoch 304/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.3539 - accuracy: 0.7339\n",
            "Epoch 305/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.2927 - accuracy: 0.7339\n",
            "Epoch 306/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.3077 - accuracy: 0.7339\n",
            "Epoch 307/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.1932 - accuracy: 0.7339\n",
            "Epoch 308/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.1633 - accuracy: 0.7339\n",
            "Epoch 309/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.0315 - accuracy: 0.7339\n",
            "Epoch 310/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.2403 - accuracy: 0.7339\n",
            "Epoch 311/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.0707 - accuracy: 0.7339\n",
            "Epoch 312/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.1963 - accuracy: 0.7339\n",
            "Epoch 313/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.4250 - accuracy: 0.7339\n",
            "Epoch 314/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.3592 - accuracy: 0.7339\n",
            "Epoch 315/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.3213 - accuracy: 0.7339\n",
            "Epoch 316/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.1110 - accuracy: 0.7339\n",
            "Epoch 317/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.3010 - accuracy: 0.7339\n",
            "Epoch 318/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.2767 - accuracy: 0.7339\n",
            "Epoch 319/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 0.9802 - accuracy: 0.7339\n",
            "Epoch 320/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.1994 - accuracy: 0.7339\n",
            "Epoch 321/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.0318 - accuracy: 0.7339\n",
            "Epoch 322/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.3449 - accuracy: 0.7339\n",
            "Epoch 323/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.2233 - accuracy: 0.7339\n",
            "Epoch 324/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.2721 - accuracy: 0.7339\n",
            "Epoch 325/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.0975 - accuracy: 0.7339\n",
            "Epoch 326/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.4583 - accuracy: 0.7339\n",
            "Epoch 327/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.1030 - accuracy: 0.7339\n",
            "Epoch 328/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.0956 - accuracy: 0.7339\n",
            "Epoch 329/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.1397 - accuracy: 0.7339\n",
            "Epoch 330/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.1067 - accuracy: 0.7339\n",
            "Epoch 331/400\n",
            "24/24 [==============================] - 0s 4ms/step - loss: 1.4323 - accuracy: 0.7339\n",
            "Epoch 332/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.1829 - accuracy: 0.7339\n",
            "Epoch 333/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.3888 - accuracy: 0.7339\n",
            "Epoch 334/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.2112 - accuracy: 0.7339\n",
            "Epoch 335/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.2692 - accuracy: 0.7339\n",
            "Epoch 336/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.0447 - accuracy: 0.7339\n",
            "Epoch 337/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.1530 - accuracy: 0.7339\n",
            "Epoch 338/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.5642 - accuracy: 0.7339\n",
            "Epoch 339/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.3350 - accuracy: 0.7339\n",
            "Epoch 340/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.2595 - accuracy: 0.7339\n",
            "Epoch 341/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.4513 - accuracy: 0.7339\n",
            "Epoch 342/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.1730 - accuracy: 0.7339\n",
            "Epoch 343/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.0946 - accuracy: 0.7339\n",
            "Epoch 344/400\n",
            "24/24 [==============================] - 0s 4ms/step - loss: 0.9134 - accuracy: 0.7339\n",
            "Epoch 345/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.0647 - accuracy: 0.7339\n",
            "Epoch 346/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.0626 - accuracy: 0.7339\n",
            "Epoch 347/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.1378 - accuracy: 0.7339\n",
            "Epoch 348/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.0753 - accuracy: 0.7339\n",
            "Epoch 349/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.0831 - accuracy: 0.7339\n",
            "Epoch 350/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.2797 - accuracy: 0.7339\n",
            "Epoch 351/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.0871 - accuracy: 0.7339\n",
            "Epoch 352/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.2214 - accuracy: 0.7339\n",
            "Epoch 353/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.2830 - accuracy: 0.7339\n",
            "Epoch 354/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.2133 - accuracy: 0.7339\n",
            "Epoch 355/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.2200 - accuracy: 0.7339\n",
            "Epoch 356/400\n",
            "24/24 [==============================] - 0s 4ms/step - loss: 1.0190 - accuracy: 0.7339\n",
            "Epoch 357/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.1615 - accuracy: 0.7339\n",
            "Epoch 358/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.2804 - accuracy: 0.7339\n",
            "Epoch 359/400\n",
            "24/24 [==============================] - 0s 4ms/step - loss: 1.3857 - accuracy: 0.7339\n",
            "Epoch 360/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.2621 - accuracy: 0.7339\n",
            "Epoch 361/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.3667 - accuracy: 0.7339\n",
            "Epoch 362/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 0.8463 - accuracy: 0.7339\n",
            "Epoch 363/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.3360 - accuracy: 0.7339\n",
            "Epoch 364/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.5329 - accuracy: 0.7339\n",
            "Epoch 365/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.1306 - accuracy: 0.7339\n",
            "Epoch 366/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 0.9820 - accuracy: 0.7339\n",
            "Epoch 367/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.2798 - accuracy: 0.7339\n",
            "Epoch 368/400\n",
            "24/24 [==============================] - 0s 4ms/step - loss: 1.1583 - accuracy: 0.7339\n",
            "Epoch 369/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.3452 - accuracy: 0.7339\n",
            "Epoch 370/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.2889 - accuracy: 0.7339\n",
            "Epoch 371/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.4100 - accuracy: 0.7339\n",
            "Epoch 372/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 0.9100 - accuracy: 0.7339\n",
            "Epoch 373/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.2268 - accuracy: 0.7339\n",
            "Epoch 374/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 0.9663 - accuracy: 0.7339\n",
            "Epoch 375/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.1712 - accuracy: 0.7339\n",
            "Epoch 376/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.3078 - accuracy: 0.7339\n",
            "Epoch 377/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.4337 - accuracy: 0.7339\n",
            "Epoch 378/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.2404 - accuracy: 0.7339\n",
            "Epoch 379/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.3675 - accuracy: 0.7339\n",
            "Epoch 380/400\n",
            "24/24 [==============================] - 0s 4ms/step - loss: 1.3103 - accuracy: 0.7339\n",
            "Epoch 381/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.0492 - accuracy: 0.7339\n",
            "Epoch 382/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.5996 - accuracy: 0.7339\n",
            "Epoch 383/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.1249 - accuracy: 0.7339\n",
            "Epoch 384/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.2429 - accuracy: 0.7339\n",
            "Epoch 385/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.1524 - accuracy: 0.7339\n",
            "Epoch 386/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.0299 - accuracy: 0.7339\n",
            "Epoch 387/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.0167 - accuracy: 0.7339\n",
            "Epoch 388/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.2874 - accuracy: 0.7339\n",
            "Epoch 389/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.1281 - accuracy: 0.7339\n",
            "Epoch 390/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.1515 - accuracy: 0.7339\n",
            "Epoch 391/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.1277 - accuracy: 0.7339\n",
            "Epoch 392/400\n",
            "24/24 [==============================] - 0s 4ms/step - loss: 1.1725 - accuracy: 0.7339\n",
            "Epoch 393/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.0358 - accuracy: 0.7339\n",
            "Epoch 394/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.2474 - accuracy: 0.7339\n",
            "Epoch 395/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.3051 - accuracy: 0.7339\n",
            "Epoch 396/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.1795 - accuracy: 0.7339\n",
            "Epoch 397/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.2833 - accuracy: 0.7339\n",
            "Epoch 398/400\n",
            "24/24 [==============================] - 0s 3ms/step - loss: 1.2301 - accuracy: 0.7339\n",
            "Epoch 399/400\n",
            "24/24 [==============================] - 0s 4ms/step - loss: 1.2106 - accuracy: 0.7339\n",
            "Epoch 400/400\n",
            "24/24 [==============================] - 0s 5ms/step - loss: 1.5225 - accuracy: 0.7339\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<keras.src.callbacks.History at 0x7bf9b80d5720>"
            ]
          },
          "metadata": {},
          "execution_count": 33
        }
      ],
      "source": [
        "#Fitting the data to our model\n",
        "model.fit(X_train,y_train,batch_size=20,epochs=400)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jAgJb_b4ujX0",
        "outputId": "0f104401-4cfe-40d4-af45-586d89082af3"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "4/4 [==============================] - 0s 3ms/step\n"
          ]
        }
      ],
      "source": [
        "#Making Prediction from our model\n",
        "predictions=model.predict(X_test)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "mpaJq4BQujX1"
      },
      "outputs": [],
      "source": [
        "#converting the probablitiy obtained using the predict method to the binary output\n",
        "predictions=(predictions>0.5)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "IVIDrJzZujX1"
      },
      "outputs": [],
      "source": [
        "#Importing the library and Evaluating the performance of our ANN Model on the test set\n",
        "from sklearn.metrics import confusion_matrix,classification_report,accuracy_score"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "asgDP_0DujX1",
        "outputId": "c7a39ffe-4a19-4c07-9294-a913b1bf76ba"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Confusion Matrix \n",
            " [[74  0]\n",
            " [43  0]]\n"
          ]
        }
      ],
      "source": [
        "print('Confusion Matrix \\n',confusion_matrix(y_test,predictions))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "F5KO-DRMujYa",
        "outputId": "1c8d902b-046f-4c39-b882-647e98a307d7"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Classification Report \n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       0.63      1.00      0.77        74\n",
            "           1       0.00      0.00      0.00        43\n",
            "\n",
            "    accuracy                           0.63       117\n",
            "   macro avg       0.32      0.50      0.39       117\n",
            "weighted avg       0.40      0.63      0.49       117\n",
            "\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n"
          ]
        }
      ],
      "source": [
        "#Printing the Classifcation Report\n",
        "print('Classification Report \\n',classification_report(y_test,predictions))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2-Q3tFJ4ujYa",
        "outputId": "1b784656-2785-47ac-8ee5-9ab0f44bac3c"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy of our mode when applied on test set- 0.6324786324786325\n"
          ]
        }
      ],
      "source": [
        "#Printing the Classifcation Report\n",
        "print('Accuracy of our mode when applied on test set-',accuracy_score(y_test,predictions))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "MfLhD3VSujYa"
      },
      "outputs": [],
      "source": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.6.7"
    },
    "colab": {
      "provenance": [],
      "include_colab_link": true
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}